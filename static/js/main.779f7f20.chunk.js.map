{"version":3,"sources":["secrets.js","App.js","serviceWorker.js","index.js"],"names":["apikey","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputChange","e","console","log","target","name","value","setState","defineProperty","handleSubmit","fetchData","_this$state","state","street1","city","voterInfoUrl","concat","fetch","then","res","json","data","dataRecieved","catch","error","electionsUrl","street2","country","react_default","a","createElement","className","role","htmlFor","type","aria-describedby","placeholder","onChange","id","normalizedInput","line1","zip","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.779f7f20.chunk.js","sourcesContent":["export const apikey = \"AIzaSyAGNAWHYmzPtl9h2vVMmLBhlD5o3Et1NCw\"\r\n\r\nexport default apikey;\r\n","import React, { Component } from 'react';\nimport './App.scss';\nimport apikey from './secrets'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n\n      dataRecieved: null,\n      electionsUrl: `https://www.googleapis.com/civicinfo/v2/elections?key=${apikey}`,\n      street1: \"140 pope street\",\n      street2: \"apt. 1\",\n      city: \"louisville\",\n      state: \"kentucky\",\n      country: \"us\",\n\n    }\n  }\n\n  handleInputChange = e => {\n    console.log(e.target.name);\n    console.log(e.target.value);\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit = e => {\n    console.log(e.target.name);\n    this.fetchData();\n  }\n\n  fetchData = () => {\n\n    const {street1, city, state} = this.state;\n    let voterInfoUrl = `https://www.googleapis.com/civicinfo/v2/voterinfo?key=${apikey}&address=${street1}.${city} ${state}&electionId=2000`;\n\n    fetch(voterInfoUrl)\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({\n          dataRecieved: true,\n          data: data\n        })\n      })\n      .then(() => console.log(this.state.data))\n      .catch(error => console.log(error))\n\n  }\n\n  componentDidMount() {\n    console.log(\"loaded\");\n    this.fetchData();\n  }\n\n\n  render() {\n\n    const { dataRecieved } = this.state;\n\n    return (\n\n      <section className=\"app\">\n\n        <header role=\"heading\">\n          <h1 className=\"text-primary\">VoteInfo</h1>\n        </header>\n\n        <main role=\"Main\">\n\n          <h2 className=\"display-4\">Enter your address:</h2>\n\n          <form>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"street1\"></label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                name=\"street1\"\n                aria-describedby=\"street1Help\"\n                placeholder=\"Street Address\"\n                onChange={this.handleInputChange}\n              >\n              </input>\n              <small id=\"emailHelp\" className=\"form-text text-muted\"><em>ex. 1600 Pennsylvania Ave NW</em></small>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"street2\"></label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                name=\"street2\"\n                aria-describedby=\"street2Help\"\n                placeholder=\"Street Address cont.\"\n                onChange={this.handleInputChange}\n              >\n              </input>\n              <small id=\"street2Help\" className=\"form-text text-muted\"><em>ex. Apt. 231</em></small>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"city\"></label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                name=\"city\"\n                aria-describedby=\"cityHelp\"\n                placeholder=\"City\"\n                onChange={this.handleInputChange}\n              >\n              </input>\n              <small id=\"cityHelp\" className=\"form-text text-muted\"><em>ex. Washington</em></small>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"state\"></label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                name=\"state\"\n                aria-describedby=\"state\"\n                placeholder=\"State\"\n                onChange={this.handleInputChange}\n              >\n              </input>\n              <small id=\"stateHelp\" className=\"form-text text-muted\"><em>ex. DC</em></small>\n            </div>\n\n\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n              onChange={this.handleSubmit}\n            >\n              Submit\n            </button>\n\n          </form>\n\n          { dataRecieved ?\n            <ul>\n              <li>{this.state.data.normalizedInput.line1}</li>\n              <li>{this.state.data.normalizedInput.city}</li>\n              <li>{this.state.data.normalizedInput.state}</li>\n              <li>{this.state.data.normalizedInput.zip}</li>\n            </ul>\n          : null}\n\n\n\n        </main>\n\n        <footer>\n          <h3 className=\"text-secondary\">Footer</h3>\n        </footer>\n\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}